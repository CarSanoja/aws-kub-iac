AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: MyEnvironment

  EksClusterName:
    Description: The name of the EKS cluster
    Type: String
    Default: eks-cluster

  NodeInstanceType:
    Description: EC2 instance type for the EKS nodes
    Type: String
    Default: t3.large

  DesiredCapacity:
    Description: Desired number of nodes in the EKS node group
    Type: Number
    Default: 2

  MinSize:
    Description: Minimum number of nodes in the EKS node group
    Type: Number
    Default: 1

  MaxSize:
    Description: Maximum number of nodes in the EKS node group
    Type: Number
    Default: 4

  ImageId:
    Description: The ID of the image to use for the instances
    Type: AWS::EC2::Image::Id

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName

  HomeIp:
    Description: Your home IP address to allow SSH access to the bastion host
    Type: String

  DBName:
    Description: The database name in the RDS instance
    Type: String
    Default: mydatabase

  DBUsername:
    Description: The master username for the RDS instance
    Type: String
    Default: myuser

  DBAllocatedStorage:
    Description: The size of the database (Gb)
    Type: Number
    Default: 20

  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t3.micro

  DBEngine:
    Description: The database engine to use
    Type: String
    Default: postgres

  DBPort:
    Description: The database port
    Type: Number
    Default: 5432

Resources:
  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${EnvironmentName}-DBSecret"
      Description: Database credentials
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBUsername}"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'

  RDSDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub "${EnvironmentName}-rds-instance"
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      Engine: !Ref DBEngine
      MasterUsername: !Join ["", [ "{{resolve:secretsmanager:", !Ref DatabaseSecret, ":SecretString:username}}" ]]
      MasterUserPassword: !Join ["", [ "{{resolve:secretsmanager:", !Ref DatabaseSecret, ":SecretString:password}}" ]]
      DBName: !Ref DBName
      VPCSecurityGroups:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PrivateSubnetID"
      MultiAZ: false
      PubliclyAccessible: false
      StorageType: gp2
      Port: !Ref DBPort
      BackupRetentionPeriod: 7
      DBSubnetGroupName: !Ref RDSDBSubnetGroup

  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS instance"
      SubnetIds:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PrivateSubnetID"

  EKSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref EksClusterName
      RoleArn: !GetAtt EKSRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub "${EnvironmentName}-PrivateSubnetID"

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt EKSRole.Arn
      ScalingConfig:
        MinSize: !Ref MinSize
        DesiredSize: !Ref DesiredCapacity
        MaxSize: !Ref MaxSize
      InstanceTypes: [!Ref NodeInstanceType]
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PrivateSubnetID"

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${EnvironmentName}-app-repo"
      ImageScanningConfiguration:
        scanOnPush: true

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: CodeBuildECRPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:*
                Resource: "*"

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${EnvironmentName}-build-project"
      Source:
        Type: GITHUB
        Location: https://github.com/your-repo/your-app.git
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ECR_REPO_URI
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EnvironmentName}-app-repo"
          - Name: AWS_DEFAULT_REGION
            Value: !Ref "AWS::Region"
          - Name: IMAGE_TAG
            Value: "$CODEBUILD_BUILD_NUMBER"
          - Name: AWS_ACCOUNT_ID
            Value: !Ref "AWS::AccountId"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Cache:
        Type: NO_CACHE

  CPUUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization exceeds 80% for 5 minutes"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: InstanceId
          Value: !Ref NodeGroup
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "80"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref AlarmNotificationTopic
      InsufficientDataActions: []
      OKActions: []

  AlarmNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${EnvironmentName}-AlarmNotificationTopic"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PublicSubnetID"
      SecurityGroups:
        - Ref: WebServerSecurityGroup

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      SecurityGroupIds:
        - Ref: BastionHostSecurityGroup
      SubnetId: Fn::ImportValue: !Sub "${EnvironmentName}-PublicSubnetID"
      KeyName: !Ref KeyName
      ImageId: !Ref ImageId
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-BastionHost"

  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH access to Bastion Host
      VpcId: Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref HomeIp
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

Outputs:
  EKSClusterName:
    Description: The name of the EKS Cluster
    Value: !Ref EKSCluster
    Export:
      Name: !Sub "${EnvironmentName}-EKSClusterName"

  LoadBalancerDNS:
    Description: The DNS name of the Load Balancer
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub "${EnvironmentName}-LoadBalancerDNS"

  ECRRepositoryURI:
    Description: The URI of the ECR repository
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EnvironmentName}-app-repo"
    Export:
      Name: !Sub "${EnvironmentName}-ECRRepositoryURI"

  RDSDBInstanceEndpoint:
    Description: The endpoint of the RDS instance
    Value: !GetAtt RDSDBInstance.Endpoint.Address
    Export:
      Name: !Sub "${EnvironmentName}-RDSEndpoint"
